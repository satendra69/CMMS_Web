{"version":3,"file":"static/js/4857.0a7b9f48.chunk.js","mappings":"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","sources":["sections/_examples/mui/autocomplete-view.js","pages/components/mui/autocomplete.js"],"sourcesContent":["import { useState } from 'react';\n// @mui\nimport Masonry from '@mui/lab/Masonry';\nimport Box from '@mui/material/Box';\nimport Chip from '@mui/material/Chip';\nimport Checkbox from '@mui/material/Checkbox';\nimport Container from '@mui/material/Container';\nimport TextField from '@mui/material/TextField';\nimport Typography from '@mui/material/Typography';\nimport Autocomplete from '@mui/material/Autocomplete';\n// routes\nimport { paths } from 'src/routes/paths';\n// assets\nimport { countries } from 'src/assets/data';\n// components\nimport Iconify from 'src/components/iconify';\nimport CustomBreadcrumbs from 'src/components/custom-breadcrumbs';\n//\nimport ComponentBlock from '../component-block';\n\n// ----------------------------------------------------------------------\n\nconst options = ['Option 1', 'Option 2'];\n\nexport default function AutocompleteView() {\n  const [value, setValue] = useState(options[0]);\n\n  const [inputValue, setInputValue] = useState('');\n\n  return (\n    <>\n      <Box\n        sx={{\n          py: 5,\n          bgcolor: (theme) => (theme.palette.mode === 'light' ? 'grey.200' : 'grey.800'),\n        }}\n      >\n        <Container>\n          <CustomBreadcrumbs\n            heading=\"Autocomplete\"\n            links={[\n              {\n                name: 'Components',\n                href: paths.components,\n              },\n              { name: 'Autocomplete' },\n            ]}\n            moreLink={['https://mui.com/components/autocomplete']}\n          />\n        </Container>\n      </Box>\n\n      <Container sx={{ my: 10 }}>\n        <Masonry columns={{ xs: 1, sm: 2, md: 3 }} spacing={3}>\n          <ComponentBlock title=\"Combo box\">\n            <Autocomplete\n              fullWidth\n              options={top100Films}\n              getOptionLabel={(option) => option.title}\n              renderInput={(params) => <TextField {...params} label=\"Combo box\" margin=\"none\" />}\n              renderOption={(props, option) => (\n                <li {...props} key={option.title}>\n                  {option.title}\n                </li>\n              )}\n            />\n          </ComponentBlock>\n\n          <ComponentBlock title=\"Country Select\">\n            <Autocomplete\n              fullWidth\n              autoHighlight\n              options={countries}\n              getOptionLabel={(option) => option.label}\n              renderInput={(params) => (\n                <TextField\n                  {...params}\n                  label=\"Choose a country\"\n                  inputProps={{\n                    ...params.inputProps,\n                    autoComplete: 'new-password',\n                  }}\n                />\n              )}\n              renderOption={(props, option) => {\n                if (!option.label) {\n                  return null;\n                }\n\n                return (\n                  <li {...props} key={option.label}>\n                    <Iconify\n                      key={option.label}\n                      icon={`circle-flags:${option.code.toLowerCase()}`}\n                      width={28}\n                      sx={{ mr: 1 }}\n                    />\n                    {option.label} ({option.code}) +{option.phone}\n                  </li>\n                );\n              }}\n            />\n          </ComponentBlock>\n\n          <ComponentBlock title=\"Controllable states\" sx={{ flexDirection: 'column' }}>\n            <Autocomplete\n              fullWidth\n              value={value}\n              options={options}\n              onChange={(event, newValue) => {\n                setValue(newValue);\n              }}\n              inputValue={inputValue}\n              onInputChange={(event, newInputValue) => {\n                setInputValue(newInputValue);\n              }}\n              getOptionLabel={(option) => option}\n              renderInput={(params) => <TextField {...params} label=\"Controllable\" />}\n              renderOption={(props, option) => (\n                <li {...props} key={option}>\n                  {option}\n                </li>\n              )}\n            />\n\n            <Typography variant=\"body2\">{`value: ${\n              value !== null ? `'${value}'` : 'null'\n            }`}</Typography>\n\n            <Typography variant=\"body2\">{`inputValue: '${inputValue}'`}</Typography>\n          </ComponentBlock>\n\n          <ComponentBlock title=\"Free solo\">\n            <Autocomplete\n              fullWidth\n              freeSolo\n              options={top100Films.map((option) => option.title)}\n              getOptionLabel={(option) => option}\n              renderInput={(params) => <TextField {...params} label=\"freeSolo\" />}\n              renderOption={(props, option) => (\n                <li {...props} key={option}>\n                  {option}\n                </li>\n              )}\n            />\n\n            <Autocomplete\n              fullWidth\n              freeSolo\n              disableClearable\n              options={top100Films.map((option) => option.title)}\n              getOptionLabel={(option) => option}\n              renderInput={(params) => (\n                <TextField\n                  {...params}\n                  label=\"Search input\"\n                  InputProps={{ ...params.InputProps, type: 'search' }}\n                />\n              )}\n              renderOption={(props, option) => (\n                <li {...props} key={option}>\n                  {option}\n                </li>\n              )}\n            />\n          </ComponentBlock>\n\n          <ComponentBlock title=\"Multiple Values\">\n            <Autocomplete\n              fullWidth\n              multiple\n              limitTags={3}\n              options={top100Films}\n              getOptionLabel={(option) => option.title}\n              defaultValue={top100Films.slice(0, 8)}\n              renderInput={(params) => (\n                <TextField {...params} label=\"filterSelectedOptions\" placeholder=\"Favorites\" />\n              )}\n              renderOption={(props, option) => (\n                <li {...props} key={option.title}>\n                  {option.title}\n                </li>\n              )}\n              renderTags={(selected, getTagProps) =>\n                selected.map((option, index) => (\n                  <Chip\n                    {...getTagProps({ index })}\n                    key={option.title}\n                    label={option.title}\n                    size=\"small\"\n                    variant=\"soft\"\n                  />\n                ))\n              }\n            />\n          </ComponentBlock>\n\n          <ComponentBlock title=\"Checkboxes\">\n            <Autocomplete\n              fullWidth\n              multiple\n              options={top100Films}\n              disableCloseOnSelect\n              getOptionLabel={(option) => option.title}\n              renderInput={(params) => (\n                <TextField {...params} label=\"Checkboxes\" placeholder=\"Favorites\" />\n              )}\n              renderOption={(props, option, { selected }) => (\n                <li {...props} key={option.title}>\n                  <Checkbox key={option.title} size=\"small\" disableRipple checked={selected} />\n                  {option.title}\n                </li>\n              )}\n              renderTags={(selected, getTagProps) =>\n                selected.map((option, index) => (\n                  <Chip\n                    {...getTagProps({ index })}\n                    key={option.title}\n                    label={option.title}\n                    size=\"small\"\n                  />\n                ))\n              }\n            />\n          </ComponentBlock>\n\n          <ComponentBlock title=\"Sizes\">\n            <Autocomplete\n              fullWidth\n              options={top100Films}\n              getOptionLabel={(option) => option.title}\n              defaultValue={top100Films[13]}\n              renderInput={(params) => (\n                <TextField {...params} label=\"Size Medium\" placeholder=\"Favorites\" />\n              )}\n              renderOption={(props, option) => (\n                <li {...props} key={option.title}>\n                  {option.title}\n                </li>\n              )}\n            />\n\n            <Autocomplete\n              fullWidth\n              multiple\n              size=\"small\"\n              options={top100Films}\n              getOptionLabel={(option) => option.title}\n              defaultValue={[top100Films[13]]}\n              renderInput={(params) => (\n                <TextField {...params} label=\"Size small\" placeholder=\"Favorites\" />\n              )}\n              renderOption={(props, option) => (\n                <li {...props} key={option.title}>\n                  {option.title}\n                </li>\n              )}\n              renderTags={(selected, getTagProps) =>\n                selected.map((option, index) => (\n                  <Chip\n                    {...getTagProps({ index })}\n                    key={option.title}\n                    label={option.title}\n                    size=\"small\"\n                    color=\"info\"\n                    variant=\"soft\"\n                  />\n                ))\n              }\n            />\n          </ComponentBlock>\n        </Masonry>\n      </Container>\n    </>\n  );\n}\n\n// ----------------------------------------------------------------------\n\nconst top100Films = [\n  { title: 'The Shawshank Redemption', year: 1994 },\n  { title: 'The Godfather', year: 1972 },\n  { title: 'The Godfather: Part II', year: 1974 },\n  { title: 'The Dark Knight', year: 2008 },\n  { title: '12 Angry Men', year: 1957 },\n  { title: \"Schindler's List\", year: 1993 },\n  { title: 'Pulp Fiction', year: 1994 },\n  { title: 'The Lord of the Rings: The Return of the King', year: 2003 },\n  { title: 'The Good, the Bad and the Ugly', year: 1966 },\n  { title: 'Fight Club', year: 1999 },\n  { title: 'The Lord of the Rings: The Fellowship of the Ring', year: 2001 },\n  { title: 'Star Wars: Episode V - The Empire Strikes Back', year: 1980 },\n  { title: 'Forrest Gump', year: 1994 },\n  { title: 'Inception', year: 2010 },\n  { title: 'The Lord of the Rings: The Two Towers', year: 2002 },\n  { title: \"One Flew Over the Cuckoo's Nest\", year: 1975 },\n  { title: 'Goodfellas', year: 1990 },\n  { title: 'The Matrix', year: 1999 },\n  { title: 'Seven Samurai', year: 1954 },\n  { title: 'Star Wars: Episode IV - A New Hope', year: 1977 },\n  { title: 'City of God', year: 2002 },\n  { title: 'Se7en', year: 1995 },\n  { title: 'The Silence of the Lambs', year: 1991 },\n  { title: \"It's a Wonderful Life\", year: 1946 },\n  { title: 'Life Is Beautiful', year: 1997 },\n  { title: 'The Usual Suspects', year: 1995 },\n  { title: 'Léon: The Professional', year: 1994 },\n  { title: 'Spirited Away', year: 2001 },\n  { title: 'Saving Private Ryan', year: 1998 },\n  { title: 'Once Upon a Time in the West', year: 1968 },\n  { title: 'American History X', year: 1998 },\n  { title: 'Interstellar', year: 2014 },\n  { title: 'Casablanca', year: 1942 },\n  { title: 'City Lights', year: 1931 },\n  { title: 'Psycho', year: 1960 },\n  { title: 'The Green Mile', year: 1999 },\n  { title: 'The Intouchables', year: 2011 },\n  { title: 'Modern Times', year: 1936 },\n  { title: 'Raiders of the Lost Ark', year: 1981 },\n  { title: 'Rear Window', year: 1954 },\n  { title: 'The Pianist', year: 2002 },\n  { title: 'The Departed', year: 2006 },\n  { title: 'Terminator 2: Judgment Day', year: 1991 },\n  { title: 'Back to the Future', year: 1985 },\n  { title: 'Whiplash', year: 2014 },\n  { title: 'Gladiator', year: 2000 },\n  { title: 'Memento', year: 2000 },\n  { title: 'The Prestige', year: 2006 },\n  { title: 'The Lion King', year: 1994 },\n  { title: 'Apocalypse Now', year: 1979 },\n  { title: 'Alien', year: 1979 },\n  { title: 'Sunset Boulevard', year: 1950 },\n  {\n    title: 'Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb',\n    year: 1964,\n  },\n  { title: 'The Great Dictator', year: 1940 },\n  { title: 'Cinema Paradiso', year: 1988 },\n  { title: 'The Lives of Others', year: 2006 },\n  { title: 'Grave of the Fireflies', year: 1988 },\n  { title: 'Paths of Glory', year: 1957 },\n  { title: 'Django Unchained', year: 2012 },\n  { title: 'The Shining', year: 1980 },\n  { title: 'WALL·E', year: 2008 },\n  { title: 'American Beauty', year: 1999 },\n  { title: 'The Dark Knight Rises', year: 2012 },\n  { title: 'Princess Mononoke', year: 1997 },\n  { title: 'Aliens', year: 1986 },\n  { title: 'Oldboy', year: 2003 },\n  { title: 'Once Upon a Time in America', year: 1984 },\n  { title: 'Witness for the Prosecution', year: 1957 },\n  { title: 'Das Boot', year: 1981 },\n  { title: 'Citizen Kane', year: 1941 },\n  { title: 'North by Northwest', year: 1959 },\n  { title: 'Vertigo', year: 1958 },\n  { title: 'Star Wars: Episode VI - Return of the Jedi', year: 1983 },\n  { title: 'Reservoir Dogs', year: 1992 },\n  { title: 'Braveheart', year: 1995 },\n  { title: 'M', year: 1931 },\n  { title: 'Requiem for a Dream', year: 2000 },\n  { title: 'Amélie', year: 2001 },\n  { title: 'A Clockwork Orange', year: 1971 },\n  { title: 'Like Stars on Earth', year: 2007 },\n  { title: 'Taxi Driver', year: 1976 },\n  { title: 'Lawrence of Arabia', year: 1962 },\n  { title: 'Double Indemnity', year: 1944 },\n  { title: 'Eternal Sunshine of the Spotless Mind', year: 2004 },\n  { title: 'Amadeus', year: 1984 },\n  { title: 'To Kill a Mockingbird', year: 1962 },\n  { title: 'Toy Story 3', year: 2010 },\n  { title: 'Logan', year: 2017 },\n  { title: 'Full Metal Jacket', year: 1987 },\n  { title: 'Dangal', year: 2016 },\n  { title: 'The Sting', year: 1973 },\n  { title: '2001: A Space Odyssey', year: 1968 },\n  { title: \"Singin' in the Rain\", year: 1952 },\n  { title: 'Toy Story', year: 1995 },\n  { title: 'Bicycle Thieves', year: 1948 },\n  { title: 'The Kid', year: 1921 },\n  { title: 'Inglourious Basterds', year: 2009 },\n  { title: 'Snatch', year: 2000 },\n  { title: '3 Idiots', year: 2009 },\n  { title: 'Monty Python and the Holy Grail', year: 1975 },\n];\n","import { Helmet } from 'react-helmet-async';\n// sections\nimport AutocompleteView from 'src/sections/_examples/mui/autocomplete-view';\n\n// ----------------------------------------------------------------------\n\nexport default function AutocompletePage() {\n  return (\n    <>\n      <Helmet>\n        <title> MUI: Autocomplete</title>\n      </Helmet>\n\n      <AutocompleteView />\n    </>\n  );\n}\n"],"names":["options","AutocompleteView","value","setValue","useState","inputValue","setInputValue","_jsxs","_Fragment","children","_jsx","Box","sx","py","bgcolor","theme","palette","mode","Container","CustomBreadcrumbs","heading","links","name","href","paths","components","moreLink","my","Masonry","columns","xs","sm","md","spacing","ComponentBlock","title","Autocomplete","fullWidth","top100Films","getOptionLabel","option","renderInput","params","TextField","label","margin","renderOption","props","_createElement","key","autoHighlight","countries","inputProps","autoComplete","Iconify","icon","concat","code","toLowerCase","width","mr","phone","flexDirection","onChange","event","newValue","onInputChange","newInputValue","Typography","variant","freeSolo","map","disableClearable","InputProps","type","multiple","limitTags","defaultValue","slice","placeholder","renderTags","selected","getTagProps","index","Chip","size","disableCloseOnSelect","_ref","Checkbox","disableRipple","checked","color","year","AutocompletePage","Helmet"],"sourceRoot":""}