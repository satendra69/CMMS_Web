{"version":3,"file":"static/js/2754.d5ed1c51.chunk.js","mappings":"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","sources":["sections/_examples/extra/form-validation-view/schema.js","sections/_examples/extra/form-validation-view/values-preview.js","sections/_examples/extra/form-validation-view/react-hook-form.js","sections/_examples/extra/form-validation-view/index.js","pages/components/extra/form-validation.js"],"sourcesContent":["import * as Yup from 'yup';\n\n// ----------------------------------------------------------------------\n\nexport const FormSchema = Yup.object().shape({\n  fullName: Yup.string()\n    .required('Full name is required')\n    .min(6, 'Mininum 6 characters')\n    .max(32, 'Maximum 32 characters'),\n  email: Yup.string().required('Email is required').email('Email must be a valid email address'),\n  age: Yup.number()\n    .required('Age is required')\n    .moreThan(18, 'Age must be between 18 and 100')\n    .lessThan(100, 'Age must be between 18 and 100'),\n  //\n  startDate: Yup.mixed().nullable().required('Start date is required'),\n  endDate: Yup.mixed()\n    .required('End date is required')\n    .test(\n      'date-min',\n      'End date must be later than start date',\n      (value, { parent }) => value.getTime() > parent.startDate.getTime()\n    ),\n  password: Yup.string()\n    .required('Password is required')\n    .min(6, 'Password should be of minimum 6 characters length'),\n  confirmPassword: Yup.string()\n    .required('Confirm password is required')\n    .oneOf([Yup.ref('password')], \"Password's not match\"),\n  //\n  slider: Yup.number().required('Slider is required').min(10, 'Mininum value is >= 10'),\n  sliderRange: Yup.mixed()\n    .required('Slider range is is required')\n    .test('min', 'Range must be between 20 and 80', (value) => value[0] >= 20)\n    .test('max', 'Range must be between 20 and 80', (value) => value[1] <= 80),\n  //\n  singleUpload: Yup.mixed().nullable().required('Single upload is required'),\n  multiUpload: Yup.array().min(2, 'Must have at least 2 items'),\n  //\n  checkbox: Yup.boolean().oneOf([true], 'Checkbox is required'),\n  multiCheckbox: Yup.array().min(1, 'Choose at least one option'),\n  //\n  singleSelect: Yup.string().required('Single select is required'),\n  multiSelect: Yup.array().min(2, 'Must have at least 2 items'),\n  //\n  switch: Yup.boolean().oneOf([true], 'Switch is required'),\n  radioGroup: Yup.string().required('Choose at least one option'),\n  editor: Yup.string().required('Editor is required'),\n  autocomplete: Yup.mixed().nullable().required('Autocomplete is required'),\n});\n","import { useFormContext } from 'react-hook-form';\n// @mui\nimport { useTheme } from '@mui/material/styles';\nimport Stack from '@mui/material/Stack';\nimport Portal from '@mui/material/Portal';\nimport Divider from '@mui/material/Divider';\nimport Typography from '@mui/material/Typography';\n// theme\nimport { bgBlur } from 'src/theme/css';\n// hooks\nimport { useResponsive } from 'src/hooks/use-responsive';\n// components\nimport { fileData } from 'src/components/file-thumbnail';\n\n// ----------------------------------------------------------------------\n\nexport default function ValuesPreview() {\n  const theme = useTheme();\n\n  const mdUp = useResponsive('up', 'md');\n\n  const {\n    watch,\n    formState: { errors },\n  } = useFormContext();\n\n  const values = watch();\n\n  if (!mdUp) {\n    return null;\n  }\n\n  return (\n    <Portal>\n      <Stack\n        sx={{\n          p: 3,\n          top: 0,\n          right: 0,\n          height: 1,\n          width: 280,\n          position: 'fixed',\n          overflowX: 'auto',\n          color: 'common.white',\n          zIndex: theme.zIndex.drawer,\n          ...bgBlur({ color: theme.palette.grey[900] }),\n        }}\n      >\n        <Typography variant=\"overline\" sx={{ mb: 2, color: 'success.light' }}>\n          Values\n        </Typography>\n\n        {Object.keys(values).map((value) => (\n          <Stack key={value} sx={{ typography: 'caption', mt: 0.5 }}>\n            <Typography variant=\"body2\" sx={{ color: 'warning.main' }}>\n              {value} :\n            </Typography>\n\n            {parseValue(values, value)}\n          </Stack>\n        ))}\n\n        <Divider sx={{ my: 2 }} />\n\n        <Typography variant=\"overline\" sx={{ mb: 2, color: 'error.light' }}>\n          Errors\n        </Typography>\n\n        <Typography variant=\"caption\" sx={{ color: 'error.light' }}>\n          {JSON.stringify(Object.keys(errors), null, 2)}\n        </Typography>\n      </Stack>\n    </Portal>\n  );\n}\n\n// ----------------------------------------------------------------------\n\nfunction parseValue(values, value) {\n  if (value === 'singleUpload') {\n    return JSON.stringify(values.singleUpload && fileData(values.singleUpload));\n  }\n  if (value === 'multiUpload') {\n    return JSON.stringify(values.multiUpload.map((file) => fileData(file)));\n  }\n  return JSON.stringify(values[value]) || '---';\n}\n","import PropTypes from 'prop-types';\nimport { useCallback } from 'react';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { useForm, Controller } from 'react-hook-form';\n// @mui\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\nimport LoadingButton from '@mui/lab/LoadingButton';\nimport Box from '@mui/material/Box';\nimport Divider from '@mui/material/Divider';\nimport MenuItem from '@mui/material/MenuItem';\nimport Backdrop from '@mui/material/Backdrop';\nimport IconButton from '@mui/material/IconButton';\nimport Typography from '@mui/material/Typography';\nimport Stack from '@mui/material/Stack';\nimport InputAdornment from '@mui/material/InputAdornment';\nimport CircularProgress from '@mui/material/CircularProgress';\n// hooks\nimport { useBoolean } from 'src/hooks/use-boolean';\n// components\nimport Iconify from 'src/components/iconify';\nimport FormProvider, {\n  RHFEditor,\n  RHFSelect,\n  RHFUpload,\n  RHFSwitch,\n  RHFSlider,\n  RHFCheckbox,\n  RHFTextField,\n  RHFRadioGroup,\n  RHFMultiSelect,\n  RHFAutocomplete,\n  RHFMultiCheckbox,\n} from 'src/components/hook-form';\n//\nimport { FormSchema } from './schema';\nimport ValuesPreview from './values-preview';\n\n// ----------------------------------------------------------------------\n\nconst OPTIONS = [\n  { value: 'option 1', label: 'Option 1' },\n  { value: 'option 2', label: 'Option 2' },\n  { value: 'option 3', label: 'Option 3' },\n  { value: 'option 4', label: 'Option 4' },\n  { value: 'option 5', label: 'Option 5' },\n  { value: 'option 6', label: 'Option 6' },\n  { value: 'option 7', label: 'Option 7' },\n  { value: 'option 8', label: 'Option 8' },\n];\n\nexport const defaultValues = {\n  age: 0,\n  email: '',\n  fullName: '',\n  //\n  editor: '',\n  switch: false,\n  radioGroup: '',\n  autocomplete: null,\n  //\n  password: '',\n  confirmPassword: '',\n  //\n  startDate: null,\n  endDate: null,\n  //\n  singleUpload: null,\n  multiUpload: [],\n  //\n  singleSelect: '',\n  multiSelect: [],\n  //\n  checkbox: false,\n  multiCheckbox: [],\n  //\n  slider: 8,\n  sliderRange: [15, 80],\n};\n\nexport default function ReactHookForm({ debug }) {\n  const password = useBoolean();\n\n  const methods = useForm({\n    resolver: yupResolver(FormSchema),\n    defaultValues,\n  });\n\n  const {\n    watch,\n    reset,\n    control,\n    setValue,\n    handleSubmit,\n    formState: { isSubmitting },\n  } = methods;\n\n  const values = watch();\n\n  const onSubmit = handleSubmit(async (data) => {\n    try {\n      await new Promise((resolve) => setTimeout(resolve, 3000));\n      reset();\n      console.info('DATA', data);\n    } catch (error) {\n      console.error(error);\n    }\n  });\n\n  const handleDropSingleFile = useCallback(\n    (acceptedFiles) => {\n      const file = acceptedFiles[0];\n\n      const newFile = Object.assign(file, {\n        preview: URL.createObjectURL(file),\n      });\n\n      if (newFile) {\n        setValue('singleUpload', newFile, { shouldValidate: true });\n      }\n    },\n    [setValue]\n  );\n\n  const handleDropMultiFile = useCallback(\n    (acceptedFiles) => {\n      const files = values.multiUpload || [];\n\n      const newFiles = acceptedFiles.map((file) =>\n        Object.assign(file, {\n          preview: URL.createObjectURL(file),\n        })\n      );\n\n      setValue('multiUpload', [...files, ...newFiles], {\n        shouldValidate: true,\n      });\n    },\n    [setValue, values.multiUpload]\n  );\n\n  return (\n    <>\n      {isSubmitting && (\n        <Backdrop open sx={{ zIndex: (theme) => theme.zIndex.modal + 1 }}>\n          <CircularProgress color=\"primary\" />\n        </Backdrop>\n      )}\n\n      <FormProvider methods={methods} onSubmit={onSubmit}>\n        <Box\n          gap={5}\n          display=\"grid\"\n          gridTemplateColumns={{\n            xs: 'repeat(1, 1fr)',\n            sm: 'repeat(2, 1fr)',\n          }}\n        >\n          <Stack spacing={2}>\n            <Block>\n              <RHFTextField name=\"fullName\" label=\"Full Name\" />\n            </Block>\n\n            <Block>\n              <RHFTextField name=\"email\" label=\"Email address\" />\n            </Block>\n\n            <Block>\n              <RHFTextField name=\"age\" label=\"Age\" type=\"number\" />\n            </Block>\n\n            <Stack spacing={2} direction={{ xs: 'column', sm: 'row' }}>\n              <Controller\n                name=\"startDate\"\n                control={control}\n                render={({ field, fieldState: { error } }) => (\n                  <DatePicker\n                    {...field}\n                    label=\"Start date\"\n                    format=\"dd/MM/yyyy\"\n                    slotProps={{\n                      textField: {\n                        fullWidth: true,\n                        error: !!error,\n                        helperText: error?.message,\n                      },\n                    }}\n                  />\n                )}\n              />\n\n              <Controller\n                name=\"endDate\"\n                control={control}\n                render={({ field, fieldState: { error } }) => (\n                  <DatePicker\n                    {...field}\n                    label=\"End date\"\n                    format=\"dd/MM/yyyy\"\n                    slotProps={{\n                      textField: {\n                        fullWidth: true,\n                        error: !!error,\n                        helperText: error?.message,\n                      },\n                    }}\n                  />\n                )}\n              />\n            </Stack>\n\n            <Stack spacing={2} direction={{ xs: 'column', sm: 'row' }}>\n              <Block>\n                <RHFTextField\n                  name=\"password\"\n                  label=\"Password\"\n                  type={password.value ? 'text' : 'password'}\n                  InputProps={{\n                    endAdornment: (\n                      <InputAdornment position=\"end\">\n                        <IconButton onClick={password.onToggle} edge=\"end\">\n                          <Iconify\n                            icon={password.value ? 'solar:eye-bold' : 'solar:eye-closed-bold'}\n                          />\n                        </IconButton>\n                      </InputAdornment>\n                    ),\n                  }}\n                />\n              </Block>\n\n              <Block>\n                <RHFTextField\n                  name=\"confirmPassword\"\n                  label=\"Confirm Password\"\n                  type={password.value ? 'text' : 'password'}\n                  InputProps={{\n                    endAdornment: (\n                      <InputAdornment position=\"end\">\n                        <IconButton onClick={password.onToggle} edge=\"end\">\n                          <Iconify\n                            icon={password.value ? 'solar:eye-bold' : 'solar:eye-closed-bold'}\n                          />\n                        </IconButton>\n                      </InputAdornment>\n                    ),\n                  }}\n                />\n              </Block>\n            </Stack>\n\n            <Block label=\"RHFAutocomplete\">\n              <RHFAutocomplete\n                name=\"autocomplete\"\n                label=\"Autocomplete\"\n                options={OPTIONS}\n                getOptionLabel={(option) => option.label}\n                isOptionEqualToValue={(option, value) => option.value === value.value}\n                renderOption={(props, option) => (\n                  <li {...props} key={option.value}>\n                    {option.label}\n                  </li>\n                )}\n              />\n            </Block>\n\n            <Block label=\"RHFSelect\">\n              <RHFSelect name=\"singleSelect\" label=\"Single select\">\n                <MenuItem value=\"\">None</MenuItem>\n                <Divider sx={{ borderStyle: 'dashed' }} />\n                {OPTIONS.map((option) => (\n                  <MenuItem key={option.value} value={option.label}>\n                    {option.label}\n                  </MenuItem>\n                ))}\n              </RHFSelect>\n            </Block>\n\n            <Block label=\"RHFMultiSelect\">\n              <RHFMultiSelect\n                chip\n                checkbox\n                name=\"multiSelect\"\n                label=\"Multi select\"\n                options={OPTIONS}\n              />\n            </Block>\n\n            <Block label=\"RHFEditor\">\n              <RHFEditor simple name=\"editor\" sx={{ height: 200 }} />\n            </Block>\n          </Stack>\n\n          <Stack spacing={2}>\n            <Block label=\"RHFUpload\">\n              <RHFUpload\n                name=\"singleUpload\"\n                maxSize={3145728}\n                onDrop={handleDropSingleFile}\n                onDelete={() => setValue('singleUpload', null, { shouldValidate: true })}\n              />\n            </Block>\n\n            <Block label=\"RHFUpload\">\n              <RHFUpload\n                multiple\n                thumbnail\n                name=\"multiUpload\"\n                maxSize={3145728}\n                onDrop={handleDropMultiFile}\n                onRemove={(inputFile) =>\n                  setValue(\n                    'multiUpload',\n                    values.multiUpload && values.multiUpload?.filter((file) => file !== inputFile),\n                    { shouldValidate: true }\n                  )\n                }\n                onRemoveAll={() => setValue('multiUpload', [], { shouldValidate: true })}\n                onUpload={() => console.info('ON UPLOAD')}\n              />\n            </Block>\n\n            <RHFCheckbox name=\"checkbox\" label=\"RHFCheckbox\" />\n\n            <RHFSwitch name=\"switch\" label=\"RHFSwitch\" />\n\n            <RHFRadioGroup\n              row\n              name=\"radioGroup\"\n              label=\"RHFRadioGroup\"\n              spacing={4}\n              options={[\n                { value: 'option 1', label: 'Radio 1' },\n                { value: 'option 2', label: 'Radio 2' },\n                { value: 'option 3', label: 'Radio 3' },\n              ]}\n            />\n\n            <RHFMultiCheckbox\n              row\n              name=\"multiCheckbox\"\n              label=\"RHFMultiCheckbox\"\n              spacing={4}\n              options={[\n                { value: 'option 1', label: 'Checkbox 1' },\n                { value: 'option 2', label: 'Checkbox 2' },\n                { value: 'option 3', label: 'Checkbox 3' },\n              ]}\n            />\n\n            <Block label=\"RHFSlider\">\n              <RHFSlider name=\"slider\" />\n            </Block>\n\n            <Block label=\"RHFSlider\">\n              <RHFSlider name=\"sliderRange\" />\n            </Block>\n\n            <LoadingButton\n              fullWidth\n              color=\"info\"\n              size=\"large\"\n              type=\"submit\"\n              variant=\"soft\"\n              loading={isSubmitting}\n            >\n              Submit to Check\n            </LoadingButton>\n          </Stack>\n        </Box>\n\n        {debug && <ValuesPreview />}\n      </FormProvider>\n    </>\n  );\n}\n\nReactHookForm.propTypes = {\n  debug: PropTypes.bool,\n};\n\n// ----------------------------------------------------------------------\n\nfunction Block({ label = 'RHFTextField', sx, children }) {\n  return (\n    <Stack spacing={1} sx={{ width: 1, ...sx }}>\n      <Typography\n        variant=\"caption\"\n        sx={{\n          textAlign: 'right',\n          fontStyle: 'italic',\n          color: 'text.disabled',\n        }}\n      >\n        {label}\n      </Typography>\n      {children}\n    </Stack>\n  );\n}\n\nBlock.propTypes = {\n  children: PropTypes.node,\n  label: PropTypes.string,\n  sx: PropTypes.object,\n};\n","import { useState } from 'react';\n// @mui\nimport Box from '@mui/material/Box';\nimport Stack from '@mui/material/Stack';\nimport Switch from '@mui/material/Switch';\nimport Divider from '@mui/material/Divider';\nimport Container from '@mui/material/Container';\nimport Typography from '@mui/material/Typography';\nimport FormControlLabel from '@mui/material/FormControlLabel';\n// routes\nimport { paths } from 'src/routes/paths';\n// components\nimport CustomBreadcrumbs from 'src/components/custom-breadcrumbs';\n//\nimport ReactHookForm from './react-hook-form';\n\n// ----------------------------------------------------------------------\n\nexport default function FormValidationView() {\n  const [debug, setDebug] = useState(true);\n\n  const handleChangeDebug = (event) => {\n    setDebug(event.target.checked);\n  };\n\n  return (\n    <>\n      <Box\n        sx={{\n          py: 5,\n          bgcolor: (theme) => (theme.palette.mode === 'light' ? 'grey.200' : 'grey.800'),\n        }}\n      >\n        <Container>\n          <CustomBreadcrumbs\n            heading=\"Form Validation\"\n            links={[{ name: 'Components', href: paths.components }, { name: 'Form Validation' }]}\n            moreLink={['https://react-hook-form.com/', 'https://github.com/jquense/yup']}\n          />\n        </Container>\n      </Box>\n\n      <Container sx={{ my: 10 }}>\n        <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\">\n          <Typography variant=\"h4\"> React Hook Form + Yup </Typography>\n          <FormControlLabel\n            control={<Switch checked={debug} onChange={handleChangeDebug} />}\n            label=\"Show Debug\"\n            labelPlacement=\"start\"\n          />\n        </Stack>\n\n        <Divider sx={{ my: 5 }} />\n\n        <ReactHookForm debug={debug} />\n      </Container>\n    </>\n  );\n}\n","import { Helmet } from 'react-helmet-async';\n// sections\nimport FormValidationView from 'src/sections/_examples/extra/form-validation-view';\n\n// ----------------------------------------------------------------------\n\nexport default function FormValidationPage() {\n  return (\n    <>\n      <Helmet>\n        <title> Extra: Form Validation</title>\n      </Helmet>\n\n      <FormValidationView />\n    </>\n  );\n}\n"],"names":["FormSchema","Yup","shape","fullName","required","min","max","email","age","moreThan","lessThan","startDate","nullable","endDate","test","value","_ref","parent","getTime","password","confirmPassword","oneOf","slider","sliderRange","singleUpload","multiUpload","checkbox","multiCheckbox","singleSelect","multiSelect","switch","radioGroup","editor","autocomplete","ValuesPreview","theme","useTheme","mdUp","useResponsive","watch","formState","errors","useFormContext","values","_jsx","Portal","children","_jsxs","Stack","sx","p","top","right","height","width","position","overflowX","color","zIndex","drawer","bgBlur","palette","grey","Typography","variant","mb","Object","keys","map","typography","mt","parseValue","Divider","my","JSON","stringify","fileData","file","OPTIONS","label","defaultValues","ReactHookForm","debug","useBoolean","methods","useForm","resolver","yupResolver","reset","control","setValue","handleSubmit","isSubmitting","onSubmit","async","Promise","resolve","setTimeout","console","info","data","error","handleDropSingleFile","useCallback","acceptedFiles","newFile","assign","preview","URL","createObjectURL","shouldValidate","handleDropMultiFile","files","newFiles","_Fragment","Backdrop","open","modal","CircularProgress","FormProvider","Box","gap","display","gridTemplateColumns","xs","sm","spacing","Block","RHFTextField","name","type","direction","Controller","render","_ref2","field","fieldState","DatePicker","format","slotProps","textField","fullWidth","helperText","message","_ref3","InputProps","endAdornment","InputAdornment","IconButton","onClick","onToggle","edge","Iconify","icon","RHFAutocomplete","options","getOptionLabel","option","isOptionEqualToValue","renderOption","props","_createElement","key","RHFSelect","MenuItem","borderStyle","RHFMultiSelect","chip","RHFEditor","simple","RHFUpload","maxSize","onDrop","onDelete","multiple","thumbnail","onRemove","inputFile","_values$multiUpload","filter","onRemoveAll","onUpload","RHFCheckbox","RHFSwitch","RHFRadioGroup","row","RHFMultiCheckbox","RHFSlider","LoadingButton","size","loading","_ref4","textAlign","fontStyle","FormValidationView","setDebug","useState","py","bgcolor","mode","Container","CustomBreadcrumbs","heading","links","href","paths","components","moreLink","alignItems","justifyContent","FormControlLabel","Switch","checked","onChange","event","target","labelPlacement","FormValidationPage","Helmet"],"sourceRoot":""}