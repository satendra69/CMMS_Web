{"version":3,"file":"static/js/1794.f2329790.chunk.js","mappings":"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","sources":["sections/_examples/mui/data-grid-view/data-grid-basic.js","sections/_examples/mui/data-grid-view/data-grid-custom.js","sections/_examples/mui/data-grid-view/index.js","pages/components/mui/data-grid.js"],"sourcesContent":["import PropTypes from 'prop-types';\n// @mui\nimport IconButton from '@mui/material/IconButton';\nimport { DataGrid } from '@mui/x-data-grid';\n// components\nimport Iconify from 'src/components/iconify';\n\n// ----------------------------------------------------------------------\n\nconst columns = [\n  {\n    field: 'id',\n    headerName: 'ID',\n    width: 120,\n  },\n  {\n    field: 'firstName',\n    headerName: 'First name',\n    width: 160,\n    editable: true,\n  },\n  {\n    field: 'lastName',\n    headerName: 'Last name',\n    width: 160,\n    editable: true,\n  },\n  {\n    field: 'age',\n    headerName: 'Age',\n    type: 'number',\n    width: 120,\n    editable: true,\n    align: 'center',\n    headerAlign: 'center',\n  },\n  {\n    field: 'fullName',\n    headerName: 'Full name',\n    description: 'This column has a value getter and is not sortable.',\n    flex: 1,\n    valueGetter: (params) => `${params.row.firstName || ''} ${params.row.lastName || ''}`,\n  },\n  {\n    field: 'action',\n    headerName: ' ',\n    width: 80,\n    align: 'right',\n    sortable: false,\n    disableColumnMenu: true,\n    renderCell: () => (\n      <IconButton>\n        <Iconify icon=\"eva:more-vertical-fill\" />\n      </IconButton>\n    ),\n  },\n];\n\nexport default function DataGridBasic({ data }) {\n  return <DataGrid columns={columns} rows={data} checkboxSelection disableRowSelectionOnClick />;\n}\n\nDataGridBasic.propTypes = {\n  data: PropTypes.array,\n};\n","import PropTypes from 'prop-types';\nimport { useState, useCallback } from 'react';\n// @mui\nimport Box from '@mui/material/Box';\nimport Stack from '@mui/material/Stack';\nimport Rating from '@mui/material/Rating';\nimport Avatar from '@mui/material/Avatar';\nimport IconButton from '@mui/material/IconButton';\nimport Typography from '@mui/material/Typography';\nimport LinearProgress from '@mui/material/LinearProgress';\nimport { DataGrid, GridToolbar, getGridNumericOperators } from '@mui/x-data-grid';\n// utils\nimport { fPercent } from 'src/utils/format-number';\n// components\nimport Label from 'src/components/label';\nimport Iconify from 'src/components/iconify';\n\n// ----------------------------------------------------------------------\n\nconst columns = [\n  {\n    field: 'id',\n  },\n  {\n    field: 'avatar',\n    headerName: 'Avatar',\n    align: 'center',\n    headerAlign: 'center',\n    width: 64,\n    sortable: false,\n    filterable: false,\n    disableColumnMenu: true,\n    renderCell: (params) => (\n      <Avatar alt={params.row.name} sx={{ width: 36, height: 36 }}>\n        {params.row.name.charAt(0).toUpperCase()}\n      </Avatar>\n    ),\n  },\n  {\n    field: 'name',\n    headerName: 'Name',\n    flex: 1,\n    editable: true,\n  },\n  {\n    field: 'email',\n    headerName: 'Email',\n    flex: 1,\n    editable: true,\n    renderCell: (params) => (\n      <Typography variant=\"body2\" sx={{ textDecoration: 'underline' }} noWrap>\n        {params.row.email}\n      </Typography>\n    ),\n  },\n  {\n    field: 'lastLogin',\n    type: 'dateTime',\n    headerName: 'Last login',\n    align: 'right',\n    headerAlign: 'right',\n    width: 200,\n  },\n  {\n    field: 'rating',\n    type: 'number',\n    headerName: 'Rating',\n    width: 160,\n    disableColumnMenu: true,\n    renderCell: (params) => (\n      <Rating size=\"small\" value={params.row.rating} precision={0.5} readOnly />\n    ),\n  },\n  {\n    field: 'status',\n    type: 'singleSelect',\n    headerName: 'Status',\n    valueOptions: ['online', 'alway', 'busy'],\n    align: 'center',\n    headerAlign: 'center',\n    width: 120,\n    renderCell: (params) => (\n      <Label\n        variant=\"soft\"\n        color={\n          (params.row.status === 'busy' && 'error') ||\n          (params.row.status === 'alway' && 'warning') ||\n          'success'\n        }\n        sx={{ mx: 'auto' }}\n      >\n        {params.row.status}\n      </Label>\n    ),\n  },\n  {\n    field: 'isAdmin',\n    type: 'boolean',\n    align: 'center',\n    headerAlign: 'center',\n    width: 120,\n\n    renderCell: (params) =>\n      params.row.isAdmin ? (\n        <Iconify icon=\"eva:checkmark-circle-2-fill\" sx={{ color: 'primary.main' }} />\n      ) : (\n        '-'\n      ),\n  },\n  {\n    field: 'performance',\n    type: 'number',\n    headerName: 'Performance',\n    align: 'center',\n    headerAlign: 'center',\n    width: 160,\n    renderCell: (params) => (\n      <Stack spacing={1} direction=\"row\" alignItems=\"center\" sx={{ px: 1, width: 1, height: 1 }}>\n        <LinearProgress\n          value={params.row.performance}\n          variant=\"determinate\"\n          color={\n            (params.row.performance < 30 && 'error') ||\n            (params.row.performance > 30 && params.row.performance < 70 && 'warning') ||\n            'primary'\n          }\n          sx={{ width: 1, height: 6 }}\n        />\n        <Typography variant=\"caption\" sx={{ width: 80 }}>\n          {fPercent(params.row.performance)}\n        </Typography>\n      </Stack>\n    ),\n  },\n  {\n    field: 'action',\n    headerName: ' ',\n    align: 'right',\n    width: 80,\n    sortable: false,\n    filterable: false,\n    disableColumnMenu: true,\n    renderCell: (params) => (\n      <IconButton onClick={() => console.info('ID', params.row.id)}>\n        <Iconify icon=\"eva:more-vertical-fill\" />\n      </IconButton>\n    ),\n  },\n];\n\n// ----------------------------------------------------------------------\n\nexport default function DataGridCustom({ data }) {\n  const [selectedRows, setSelectedRows] = useState([]);\n\n  const [columnVisibilityModel, setColumnVisibilityModel] = useState({\n    id: false,\n  });\n\n  if (columns.length) {\n    const ratingColumn = columns.find((column) => column.field === 'rating');\n\n    const ratingColIndex = columns.findIndex((col) => col.field === 'rating');\n\n    const ratingFilterOperators = getGridNumericOperators().map((operator) => ({\n      ...operator,\n      InputComponent: RatingInputValue,\n    }));\n    columns[ratingColIndex] = {\n      ...ratingColumn,\n      filterOperators: ratingFilterOperators,\n    };\n  }\n\n  const handleChangeColumnVisibilityModel = useCallback((newModel) => {\n    setColumnVisibilityModel(newModel);\n  }, []);\n\n  const hiddenFields = ['id', 'action'];\n\n  const getTogglableColumns = () =>\n    columns.filter((column) => !hiddenFields.includes(column.field)).map((column) => column.field);\n\n  const selected = data.filter((row) => selectedRows.includes(row.id));\n\n  console.info('SELECTED ROWS', selected);\n\n  return (\n    <DataGrid\n      checkboxSelection\n      disableRowSelectionOnClick\n      rows={data}\n      columns={columns}\n      onRowSelectionModelChange={(newSelectionModel) => {\n        setSelectedRows(newSelectionModel);\n      }}\n      columnVisibilityModel={columnVisibilityModel}\n      onColumnVisibilityModelChange={handleChangeColumnVisibilityModel}\n      slots={{\n        toolbar: GridToolbar,\n      }}\n      slotProps={{\n        columnsPanel: {\n          getTogglableColumns,\n        },\n      }}\n    />\n  );\n}\n\nDataGridCustom.propTypes = {\n  data: PropTypes.array,\n};\n\n// ----------------------------------------------------------------------\n\nfunction RatingInputValue({ item, applyValue }) {\n  return (\n    <Box sx={{ p: 1, height: 1, alignItems: 'flex-end', display: 'flex' }}>\n      <Rating\n        size=\"small\"\n        precision={0.5}\n        placeholder=\"Filter value\"\n        value={Number(item.value)}\n        onChange={(event, newValue) => {\n          applyValue({ ...item, value: newValue });\n        }}\n      />\n    </Box>\n  );\n}\n\nRatingInputValue.propTypes = {\n  applyValue: PropTypes.func,\n  item: PropTypes.object,\n};\n","// @mui\nimport Box from '@mui/material/Box';\nimport Link from '@mui/material/Link';\nimport Card from '@mui/material/Card';\nimport Stack from '@mui/material/Stack';\nimport Container from '@mui/material/Container';\nimport CardHeader from '@mui/material/CardHeader';\nimport Typography from '@mui/material/Typography';\n// routes\nimport { paths } from 'src/routes/paths';\n// _mock\nimport { _mock } from 'src/_mock';\n// components\nimport CustomBreadcrumbs from 'src/components/custom-breadcrumbs';\n//\nimport DataGridBasic from './data-grid-basic';\nimport DataGridCustom from './data-grid-custom';\n\n// ----------------------------------------------------------------------\n\nconst _dataGrid = [...Array(20)].map((_, index) => {\n  const status =\n    (index % 2 && 'online') || (index % 3 && 'alway') || (index % 4 && 'busy') || 'offline';\n\n  return {\n    id: _mock.id(index),\n    status,\n    email: _mock.email(index),\n    name: _mock.fullName(index),\n    age: _mock.number.age(index),\n    lastLogin: _mock.time(index),\n    isAdmin: _mock.boolean(index),\n    lastName: _mock.lastName(index),\n    rating: _mock.number.rating(index),\n    firstName: _mock.firstName(index),\n    performance: _mock.number.percent(index),\n  };\n});\n\n// ----------------------------------------------------------------------\n\nexport default function DataGridView() {\n  return (\n    <>\n      <Box\n        sx={{\n          py: 5,\n          bgcolor: (theme) => (theme.palette.mode === 'light' ? 'grey.200' : 'grey.800'),\n        }}\n      >\n        <Container>\n          <CustomBreadcrumbs\n            heading=\"DataGrid\"\n            links={[\n              {\n                name: 'Components',\n                href: paths.components,\n              },\n              { name: 'DataGrid' },\n            ]}\n            moreLink={['https://mui.com/x/react-data-grid/']}\n            sx={{ mb: 0 }}\n          />\n\n          <Typography variant=\"body2\" sx={{ my: 3 }}>\n            This component includes 2 <strong>Free</strong> and <strong>Paid</strong> versions from\n            MUI.\n            <br />\n            Paid version will have more features. Please read more{' '}\n            <Link href=\"https://mui.com/x/react-data-grid/\" target=\"_blank\" rel=\"noopener\">\n              here\n            </Link>\n          </Typography>\n        </Container>\n      </Box>\n\n      <Container sx={{ my: 10 }}>\n        <Stack spacing={5}>\n          <Card>\n            <CardHeader title=\"Basic\" sx={{ mb: 2 }} />\n            <Box sx={{ height: 390 }}>\n              <DataGridBasic data={_dataGrid} />\n            </Box>\n          </Card>\n\n          <Card>\n            <CardHeader title=\"Custom\" sx={{ mb: 2 }} />\n            <Box sx={{ height: 720 }}>\n              <DataGridCustom data={_dataGrid} />\n            </Box>\n          </Card>\n        </Stack>\n      </Container>\n    </>\n  );\n}\n","import { Helmet } from 'react-helmet-async';\n// sections\nimport DataGridView from 'src/sections/_examples/mui/data-grid-view';\n\n// ----------------------------------------------------------------------\n\nexport default function DataGridPage() {\n  return (\n    <>\n      <Helmet>\n        <title> MUI: DataGrid</title>\n      </Helmet>\n\n      <DataGridView />\n    </>\n  );\n}\n"],"names":["columns","field","headerName","width","editable","type","align","headerAlign","description","flex","valueGetter","params","concat","row","firstName","lastName","sortable","disableColumnMenu","renderCell","_jsx","IconButton","children","Iconify","icon","DataGridBasic","_ref","data","DataGrid","rows","checkboxSelection","disableRowSelectionOnClick","filterable","Avatar","alt","name","sx","height","charAt","toUpperCase","Typography","variant","textDecoration","noWrap","email","Rating","size","value","rating","precision","readOnly","valueOptions","Label","color","status","mx","isAdmin","_jsxs","Stack","spacing","direction","alignItems","px","LinearProgress","performance","fPercent","onClick","console","info","id","DataGridCustom","selectedRows","setSelectedRows","useState","columnVisibilityModel","setColumnVisibilityModel","length","ratingColumn","find","column","ratingColIndex","findIndex","col","ratingFilterOperators","getGridNumericOperators","map","operator","InputComponent","RatingInputValue","filterOperators","handleChangeColumnVisibilityModel","useCallback","newModel","hiddenFields","selected","filter","includes","onRowSelectionModelChange","newSelectionModel","onColumnVisibilityModelChange","slots","toolbar","GridToolbar","slotProps","columnsPanel","getTogglableColumns","_ref2","item","applyValue","Box","p","display","placeholder","Number","onChange","event","newValue","_dataGrid","Array","_","index","_mock","fullName","age","number","lastLogin","time","boolean","percent","DataGridView","_Fragment","py","bgcolor","theme","palette","mode","Container","CustomBreadcrumbs","heading","links","href","paths","components","moreLink","mb","my","Link","target","rel","Card","CardHeader","title","DataGridPage","Helmet"],"sourceRoot":""}