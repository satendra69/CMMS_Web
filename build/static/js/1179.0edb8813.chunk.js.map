{"version":3,"file":"static/js/1179.0edb8813.chunk.js","mappings":"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","sources":["pages/auth-demo/modern/new-password.js","sections/auth-demo/modern/modern-login-view.js","sections/auth-demo/modern/modern-verify-view.js","sections/auth-demo/modern/modern-register-view.js","sections/auth-demo/modern/modern-new-password-view.js","sections/auth-demo/modern/modern-forgot-password-view.js"],"sourcesContent":["import { Helmet } from 'react-helmet-async';\n// sections\nimport { ModernNewPasswordView } from 'src/sections/auth-demo/modern';\n\n// ----------------------------------------------------------------------\n\nexport default function ModernNewPasswordPage() {\n  return (\n    <>\n      <Helmet>\n        <title> Auth Classic: New Password</title>\n      </Helmet>\n\n      <ModernNewPasswordView />\n    </>\n  );\n}\n","import * as Yup from 'yup';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\n// @mui\nimport LoadingButton from '@mui/lab/LoadingButton';\nimport Link from '@mui/material/Link';\nimport Stack from '@mui/material/Stack';\nimport IconButton from '@mui/material/IconButton';\nimport Typography from '@mui/material/Typography';\nimport InputAdornment from '@mui/material/InputAdornment';\n// routes\nimport { paths } from 'src/routes/paths';\nimport { RouterLink } from 'src/routes/components';\n// hooks\nimport { useBoolean } from 'src/hooks/use-boolean';\n// components\nimport Iconify from 'src/components/iconify';\nimport FormProvider, { RHFTextField } from 'src/components/hook-form';\n\n// ----------------------------------------------------------------------\n\nexport default function ModernLoginView() {\n  const password = useBoolean();\n\n  const LoginSchema = Yup.object().shape({\n    email: Yup.string().required('Email is required').email('Email must be a valid email address'),\n    password: Yup.string().required('Password is required'),\n  });\n\n  const defaultValues = {\n    email: '',\n    password: '',\n  };\n\n  const methods = useForm({\n    resolver: yupResolver(LoginSchema),\n    defaultValues,\n  });\n\n  const {\n    handleSubmit,\n    formState: { isSubmitting },\n  } = methods;\n\n  const onSubmit = handleSubmit(async (data) => {\n    try {\n      await new Promise((resolve) => setTimeout(resolve, 500));\n      console.info('DATA', data);\n    } catch (error) {\n      console.error(error);\n    }\n  });\n\n  const renderHead = (\n    <Stack spacing={2} sx={{ mb: 5 }}>\n      <Typography variant=\"h4\">Sign in to Minimal</Typography>\n\n      <Stack direction=\"row\" spacing={0.5}>\n        <Typography variant=\"body2\">New user?</Typography>\n\n        <Link component={RouterLink} href={paths.authDemo.modern.register} variant=\"subtitle2\">\n          Create an account\n        </Link>\n      </Stack>\n    </Stack>\n  );\n\n  const renderForm = (\n    <Stack spacing={2.5}>\n      <RHFTextField name=\"email\" label=\"Email address\" />\n\n      <RHFTextField\n        name=\"password\"\n        label=\"Password\"\n        type={password.value ? 'text' : 'password'}\n        InputProps={{\n          endAdornment: (\n            <InputAdornment position=\"end\">\n              <IconButton onClick={password.onToggle} edge=\"end\">\n                <Iconify icon={password.value ? 'solar:eye-bold' : 'solar:eye-closed-bold'} />\n              </IconButton>\n            </InputAdornment>\n          ),\n        }}\n      />\n\n      <Link\n        component={RouterLink}\n        href={paths.authDemo.modern.forgotPassword}\n        variant=\"body2\"\n        color=\"inherit\"\n        underline=\"always\"\n        sx={{ alignSelf: 'flex-end' }}\n      >\n        Forgot password?\n      </Link>\n\n      <LoadingButton\n        fullWidth\n        color=\"inherit\"\n        size=\"large\"\n        type=\"submit\"\n        variant=\"contained\"\n        loading={isSubmitting}\n        endIcon={<Iconify icon=\"eva:arrow-ios-forward-fill\" />}\n        sx={{ justifyContent: 'space-between', pl: 2, pr: 1.5 }}\n      >\n        Login\n      </LoadingButton>\n    </Stack>\n  );\n\n  return (\n    <FormProvider methods={methods} onSubmit={onSubmit}>\n      {renderHead}\n\n      {renderForm}\n    </FormProvider>\n  );\n}\n","import * as Yup from 'yup';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\n// @mui\nimport LoadingButton from '@mui/lab/LoadingButton';\nimport Link from '@mui/material/Link';\nimport Stack from '@mui/material/Stack';\nimport Typography from '@mui/material/Typography';\n// routes\nimport { paths } from 'src/routes/paths';\nimport { RouterLink } from 'src/routes/components';\n// components\nimport Iconify from 'src/components/iconify';\nimport FormProvider, { RHFCode, RHFTextField } from 'src/components/hook-form';\n// assets\nimport { EmailInboxIcon } from 'src/assets/icons';\n\n// ----------------------------------------------------------------------\n\nexport default function ModernVerifyView() {\n  const VerifySchema = Yup.object().shape({\n    code: Yup.string().min(6, 'Code must be at least 6 characters').required('Code is required'),\n    email: Yup.string().required('Email is required').email('Email must be a valid email address'),\n  });\n\n  const defaultValues = {\n    code: '',\n    email: '',\n  };\n\n  const methods = useForm({\n    mode: 'onChange',\n    resolver: yupResolver(VerifySchema),\n    defaultValues,\n  });\n\n  const {\n    handleSubmit,\n    formState: { isSubmitting },\n  } = methods;\n\n  const onSubmit = handleSubmit(async (data) => {\n    try {\n      await new Promise((resolve) => setTimeout(resolve, 500));\n      console.info('DATA', data);\n    } catch (error) {\n      console.error(error);\n    }\n  });\n\n  const renderForm = (\n    <Stack spacing={3} alignItems=\"center\">\n      <RHFTextField\n        name=\"email\"\n        label=\"Email\"\n        placeholder=\"example@gmail.com\"\n        InputLabelProps={{ shrink: true }}\n      />\n\n      <RHFCode name=\"code\" />\n\n      <LoadingButton\n        fullWidth\n        size=\"large\"\n        type=\"submit\"\n        variant=\"contained\"\n        loading={isSubmitting}\n      >\n        Verify\n      </LoadingButton>\n\n      <Typography variant=\"body2\">\n        {`Don’t have a code? `}\n        <Link\n          variant=\"subtitle2\"\n          sx={{\n            cursor: 'pointer',\n          }}\n        >\n          Resend code\n        </Link>\n      </Typography>\n\n      <Link\n        component={RouterLink}\n        href={paths.authDemo.classic.login}\n        color=\"inherit\"\n        variant=\"subtitle2\"\n        sx={{\n          alignItems: 'center',\n          display: 'inline-flex',\n        }}\n      >\n        <Iconify icon=\"eva:arrow-ios-back-fill\" width={16} />\n        Return to sign in\n      </Link>\n    </Stack>\n  );\n\n  const renderHead = (\n    <>\n      <EmailInboxIcon sx={{ height: 96 }} />\n\n      <Stack spacing={1} sx={{ my: 5 }}>\n        <Typography variant=\"h3\">Please check your email!</Typography>\n\n        <Typography variant=\"body2\" sx={{ color: 'text.secondary' }}>\n          We have emailed a 6-digit confirmation code to acb@domain, please enter the code in below\n          box to verify your email.\n        </Typography>\n      </Stack>\n    </>\n  );\n\n  return (\n    <FormProvider methods={methods} onSubmit={onSubmit}>\n      {renderHead}\n\n      {renderForm}\n    </FormProvider>\n  );\n}\n","import * as Yup from 'yup';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\n// @mui\nimport LoadingButton from '@mui/lab/LoadingButton';\nimport Link from '@mui/material/Link';\nimport Stack from '@mui/material/Stack';\nimport IconButton from '@mui/material/IconButton';\nimport Typography from '@mui/material/Typography';\nimport InputAdornment from '@mui/material/InputAdornment';\n// hooks\nimport { useBoolean } from 'src/hooks/use-boolean';\n// routes\nimport { paths } from 'src/routes/paths';\n// components\nimport Iconify from 'src/components/iconify';\nimport { RouterLink } from 'src/routes/components';\nimport FormProvider, { RHFTextField } from 'src/components/hook-form';\n\n// ----------------------------------------------------------------------\n\nexport default function ModernRegisterView() {\n  const password = useBoolean();\n\n  const RegisterSchema = Yup.object().shape({\n    firstName: Yup.string().required('First name required'),\n    lastName: Yup.string().required('Last name required'),\n    email: Yup.string().required('Email is required').email('Email must be a valid email address'),\n    password: Yup.string().required('Password is required'),\n  });\n\n  const defaultValues = {\n    firstName: '',\n    lastName: '',\n    email: '',\n    password: '',\n  };\n\n  const methods = useForm({\n    resolver: yupResolver(RegisterSchema),\n    defaultValues,\n  });\n\n  const {\n    handleSubmit,\n    formState: { isSubmitting },\n  } = methods;\n\n  const onSubmit = handleSubmit(async (data) => {\n    try {\n      await new Promise((resolve) => setTimeout(resolve, 500));\n      console.info('DATA', data);\n    } catch (error) {\n      console.error(error);\n    }\n  });\n\n  const renderHead = (\n    <Stack spacing={2} sx={{ mb: 5, position: 'relative' }}>\n      <Typography variant=\"h4\">Get started absolutely free</Typography>\n\n      <Stack direction=\"row\" spacing={0.5}>\n        <Typography variant=\"body2\"> Already have an account? </Typography>\n\n        <Link href={paths.authDemo.modern.login} component={RouterLink} variant=\"subtitle2\">\n          Sign in\n        </Link>\n      </Stack>\n    </Stack>\n  );\n\n  const renderTerms = (\n    <Typography\n      component=\"div\"\n      sx={{\n        color: 'text.secondary',\n        mt: 2.5,\n        typography: 'caption',\n        textAlign: 'center',\n      }}\n    >\n      {'By signing up, I agree to '}\n      <Link underline=\"always\" color=\"text.primary\">\n        Terms of Service\n      </Link>\n      {' and '}\n      <Link underline=\"always\" color=\"text.primary\">\n        Privacy Policy\n      </Link>\n      .\n    </Typography>\n  );\n\n  const renderForm = (\n    <Stack spacing={2.5}>\n      <Stack direction={{ xs: 'column', sm: 'row' }} spacing={2}>\n        <RHFTextField name=\"firstName\" label=\"First name\" />\n        <RHFTextField name=\"lastName\" label=\"Last name\" />\n      </Stack>\n\n      <RHFTextField name=\"email\" label=\"Email address\" />\n\n      <RHFTextField\n        name=\"password\"\n        label=\"Password\"\n        type={password.value ? 'text' : 'password'}\n        InputProps={{\n          endAdornment: (\n            <InputAdornment position=\"end\">\n              <IconButton onClick={password.onToggle} edge=\"end\">\n                <Iconify icon={password.value ? 'solar:eye-bold' : 'solar:eye-closed-bold'} />\n              </IconButton>\n            </InputAdornment>\n          ),\n        }}\n      />\n\n      <LoadingButton\n        fullWidth\n        color=\"inherit\"\n        size=\"large\"\n        type=\"submit\"\n        variant=\"contained\"\n        loading={isSubmitting}\n        endIcon={<Iconify icon=\"eva:arrow-ios-forward-fill\" />}\n        sx={{ justifyContent: 'space-between', pl: 2, pr: 1.5 }}\n      >\n        Create account\n      </LoadingButton>\n    </Stack>\n  );\n\n  return (\n    <FormProvider methods={methods} onSubmit={onSubmit}>\n      {renderHead}\n\n      {renderForm}\n\n      {renderTerms}\n    </FormProvider>\n  );\n}\n","import * as Yup from 'yup';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\n// @mui\nimport LoadingButton from '@mui/lab/LoadingButton';\nimport Link from '@mui/material/Link';\nimport Stack from '@mui/material/Stack';\nimport IconButton from '@mui/material/IconButton';\nimport Typography from '@mui/material/Typography';\nimport InputAdornment from '@mui/material/InputAdornment';\n// routes\nimport { paths } from 'src/routes/paths';\nimport { RouterLink } from 'src/routes/components';\n// hooks\nimport { useBoolean } from 'src/hooks/use-boolean';\n// assets\nimport { SentIcon } from 'src/assets/icons';\n// components\nimport Iconify from 'src/components/iconify';\nimport FormProvider, { RHFTextField, RHFCode } from 'src/components/hook-form';\n\n// ----------------------------------------------------------------------\n\nexport default function ModernNewPasswordView() {\n  const password = useBoolean();\n\n  const NewPasswordSchema = Yup.object().shape({\n    code: Yup.string().min(6, 'Code must be at least 6 characters').required('Code is required'),\n    email: Yup.string().required('Email is required').email('Email must be a valid email address'),\n    password: Yup.string()\n      .min(6, 'Password must be at least 6 characters')\n      .required('Password is required'),\n    confirmPassword: Yup.string()\n      .required('Confirm password is required')\n      .oneOf([Yup.ref('password')], 'Passwords must match'),\n  });\n\n  const defaultValues = {\n    code: '',\n    email: '',\n    password: '',\n    confirmPassword: '',\n  };\n\n  const methods = useForm({\n    mode: 'onChange',\n    resolver: yupResolver(NewPasswordSchema),\n    defaultValues,\n  });\n\n  const {\n    handleSubmit,\n    formState: { isSubmitting },\n  } = methods;\n\n  const onSubmit = handleSubmit(async (data) => {\n    try {\n      await new Promise((resolve) => setTimeout(resolve, 500));\n      console.info('DATA', data);\n    } catch (error) {\n      console.error(error);\n    }\n  });\n\n  const renderForm = (\n    <Stack spacing={3} alignItems=\"center\">\n      <RHFTextField\n        name=\"email\"\n        label=\"Email\"\n        placeholder=\"example@gmail.com\"\n        InputLabelProps={{ shrink: true }}\n      />\n\n      <RHFCode name=\"code\" />\n\n      <RHFTextField\n        name=\"password\"\n        label=\"Password\"\n        type={password.value ? 'text' : 'password'}\n        InputProps={{\n          endAdornment: (\n            <InputAdornment position=\"end\">\n              <IconButton onClick={password.onToggle} edge=\"end\">\n                <Iconify icon={password.value ? 'solar:eye-bold' : 'solar:eye-closed-bold'} />\n              </IconButton>\n            </InputAdornment>\n          ),\n        }}\n      />\n\n      <RHFTextField\n        name=\"confirmPassword\"\n        label=\"Confirm New Password\"\n        type={password.value ? 'text' : 'password'}\n        InputProps={{\n          endAdornment: (\n            <InputAdornment position=\"end\">\n              <IconButton onClick={password.onToggle} edge=\"end\">\n                <Iconify icon={password.value ? 'solar:eye-bold' : 'solar:eye-closed-bold'} />\n              </IconButton>\n            </InputAdornment>\n          ),\n        }}\n      />\n\n      <LoadingButton\n        fullWidth\n        size=\"large\"\n        type=\"submit\"\n        variant=\"contained\"\n        loading={isSubmitting}\n      >\n        Update Password\n      </LoadingButton>\n\n      <Typography variant=\"body2\">\n        {`Don’t have a code? `}\n        <Link\n          variant=\"subtitle2\"\n          sx={{\n            cursor: 'pointer',\n          }}\n        >\n          Resend code\n        </Link>\n      </Typography>\n\n      <Link\n        component={RouterLink}\n        href={paths.authDemo.modern.login}\n        color=\"inherit\"\n        variant=\"subtitle2\"\n        sx={{\n          alignItems: 'center',\n          display: 'inline-flex',\n        }}\n      >\n        <Iconify icon=\"eva:arrow-ios-back-fill\" width={16} />\n        Return to sign in\n      </Link>\n    </Stack>\n  );\n\n  const renderHead = (\n    <>\n      <SentIcon sx={{ height: 96 }} />\n\n      <Stack spacing={1} sx={{ my: 5 }}>\n        <Typography variant=\"h3\">Request sent successfully!</Typography>\n\n        <Typography variant=\"body2\" sx={{ color: 'text.secondary' }}>\n          We&apos;ve sent a 6-digit confirmation email to your email.\n          <br />\n          Please enter the code in below box to verify your email.\n        </Typography>\n      </Stack>\n    </>\n  );\n\n  return (\n    <FormProvider methods={methods} onSubmit={onSubmit}>\n      {renderHead}\n\n      {renderForm}\n    </FormProvider>\n  );\n}\n","import * as Yup from 'yup';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\n// @mui\nimport LoadingButton from '@mui/lab/LoadingButton';\nimport Link from '@mui/material/Link';\nimport Stack from '@mui/material/Stack';\nimport Typography from '@mui/material/Typography';\n// routes\nimport { paths } from 'src/routes/paths';\nimport { RouterLink } from 'src/routes/components';\n// assets\nimport { PasswordIcon } from 'src/assets/icons';\n// components\nimport Iconify from 'src/components/iconify';\nimport FormProvider, { RHFTextField } from 'src/components/hook-form';\n\n// ----------------------------------------------------------------------\n\nexport default function ModernForgotPasswordView() {\n  const ForgotPasswordSchema = Yup.object().shape({\n    email: Yup.string().required('Email is required').email('Email must be a valid email address'),\n  });\n\n  const defaultValues = {\n    email: '',\n  };\n\n  const methods = useForm({\n    resolver: yupResolver(ForgotPasswordSchema),\n    defaultValues,\n  });\n\n  const {\n    handleSubmit,\n    formState: { isSubmitting },\n  } = methods;\n\n  const onSubmit = handleSubmit(async (data) => {\n    try {\n      await new Promise((resolve) => setTimeout(resolve, 500));\n      console.info('DATA', data);\n    } catch (error) {\n      console.error(error);\n    }\n  });\n\n  const renderForm = (\n    <Stack spacing={3} alignItems=\"center\">\n      <RHFTextField name=\"email\" label=\"Email address\" />\n\n      <LoadingButton\n        fullWidth\n        size=\"large\"\n        type=\"submit\"\n        variant=\"contained\"\n        loading={isSubmitting}\n        endIcon={<Iconify icon=\"eva:arrow-ios-forward-fill\" />}\n        sx={{ justifyContent: 'space-between', pl: 2, pr: 1.5 }}\n      >\n        Send Request\n      </LoadingButton>\n\n      <Link\n        component={RouterLink}\n        href={paths.authDemo.modern.login}\n        color=\"inherit\"\n        variant=\"subtitle2\"\n        sx={{\n          alignItems: 'center',\n          display: 'inline-flex',\n        }}\n      >\n        <Iconify icon=\"eva:arrow-ios-back-fill\" width={16} />\n        Return to sign in\n      </Link>\n    </Stack>\n  );\n\n  const renderHead = (\n    <>\n      <PasswordIcon sx={{ height: 96 }} />\n\n      <Stack spacing={1} sx={{ my: 5 }}>\n        <Typography variant=\"h3\">Forgot your password?</Typography>\n\n        <Typography variant=\"body2\" sx={{ color: 'text.secondary' }}>\n          Please enter the email address associated with your account and We will email you a link\n          to reset your password.\n        </Typography>\n      </Stack>\n    </>\n  );\n\n  return (\n    <FormProvider methods={methods} onSubmit={onSubmit}>\n      {renderHead}\n\n      {renderForm}\n    </FormProvider>\n  );\n}\n"],"names":["ModernNewPasswordPage","_jsxs","_Fragment","children","_jsx","Helmet","ModernNewPasswordView","ModernLoginView","password","useBoolean","LoginSchema","Yup","shape","email","required","methods","useForm","resolver","yupResolver","defaultValues","handleSubmit","formState","isSubmitting","onSubmit","async","Promise","resolve","setTimeout","console","info","data","error","renderHead","Stack","spacing","sx","mb","Typography","variant","direction","Link","component","RouterLink","href","paths","authDemo","modern","register","renderForm","RHFTextField","name","label","type","value","InputProps","endAdornment","InputAdornment","position","IconButton","onClick","onToggle","edge","Iconify","icon","forgotPassword","color","underline","alignSelf","LoadingButton","fullWidth","size","loading","endIcon","justifyContent","pl","pr","FormProvider","ModernVerifyView","VerifySchema","code","min","mode","alignItems","placeholder","InputLabelProps","shrink","RHFCode","cursor","classic","login","display","width","EmailInboxIcon","height","my","ModernRegisterView","RegisterSchema","firstName","lastName","renderTerms","mt","typography","textAlign","xs","sm","NewPasswordSchema","confirmPassword","oneOf","SentIcon","ModernForgotPasswordView","ForgotPasswordSchema","PasswordIcon"],"sourceRoot":""}