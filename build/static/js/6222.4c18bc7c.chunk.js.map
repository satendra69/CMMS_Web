{"version":3,"file":"static/js/6222.4c18bc7c.chunk.js","mappings":"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","sources":["sections/overview/app/app-widget-summary.js","sections/overview/app/view/overview-app-view.js","pages/dashboard/app.js"],"sourcesContent":["import PropTypes from \"prop-types\";\n// @mui\nimport { useTheme } from \"@mui/material/styles\";\nimport Box from \"@mui/material/Box\";\nimport Stack from \"@mui/material/Stack\";\nimport Typography from \"@mui/material/Typography\";\nimport Card from \"@mui/material/Card\";\n// utils\nimport { fNumber, fPercent } from \"src/utils/format-number\";\n// components\nimport Iconify from \"src/components/iconify\";\nimport Chart from \"src/components/chart\";\n\n// ----------------------------------------------------------------------\n\nexport default function AppWidgetSummary({\n  title,\n  description,\n  percent,\n  total,\n  data,\n  sx,\n  ...other\n}) {\n  const theme = useTheme();\n\n  const isTarget = total <= parseInt(data.dsh_mst_critical_value);\n\n  const isCritical =\n    total > parseInt(data.dsh_mst_critical_value) &&\n    total < parseInt(data.dsh_mst_alert_value);\n\n  const isAlert = total > parseInt(data.dsh_mst_alert_value);\n\n  const chartOptions = {\n    // colors: colors.map((colr) => colr[1]),\n    fill: {\n      type: \"gradient\",\n      gradient: {\n        colorStops: [\n          { offset: 0, color: \"\" },\n          { offset: 100, color: \"\" },\n        ],\n      },\n    },\n    chart: {\n      sparkline: {\n        enabled: true,\n      },\n    },\n    plotOptions: {\n      bar: {\n        columnWidth: \"68%\",\n        borderRadius: 2,\n      },\n    },\n    tooltip: {\n      x: { show: false },\n      y: {\n        formatter: (value) => fNumber(value),\n        title: {\n          formatter: () => \"\",\n        },\n      },\n      marker: { show: false },\n    },\n  };\n  const iconProps = {\n    isTarget: { name: \"streamline:target\", color: \"#008135\" },\n    isCritical: { name: \"streamline:target\", color: \"#fa6b00\" },\n    isAlert: { name: \"ant-design:alert-outlined\", color: \"#cd0000\" },\n    defaultIcon: {\n      name: \"solar:double-alt-arrow-up-bold-duotone\",\n      color: \"green\",\n    },\n  };\n  const { name, color } = isTarget\n    ? iconProps.isTarget\n    : isCritical\n    ? iconProps.isCritical\n    : isAlert\n    ? iconProps.isAlert\n    : iconProps.defaultIcon;\n  return (\n    <Card\n      sx={{ display: \"flex\", alignItems: \"center\", p: 3, ...sx }}\n      {...other}\n    >\n      <Box sx={{ flexGrow: 1 }}>\n        <Typography className=\"TITLECLS\">{title}</Typography>\n\n        <Typography variant=\"h3\">{fNumber(total)}</Typography>\n        <Typography className=\"DESCLS\">{description}</Typography>\n      </Box>\n      <Stack direction=\"row\" alignItems=\"center\" sx={{ mt: 2, mb: 1 }}>\n        <Iconify\n          width={24}\n          // icon={\n          //   percent < 0\n          //     ? \"solar:double-alt-arrow-down-bold-duotone\"\n          //     : \"solar:double-alt-arrow-up-bold-duotone\"\n          // }\n          icon={name}\n          sx={{\n            mr: 1,\n            color: color,\n            ...(percent < 0 && {\n              color: \"error.main\",\n            }),\n          }}\n        />\n      </Stack>\n    </Card>\n  );\n}\n\nAppWidgetSummary.propTypes = {\n  data: PropTypes.object,\n  percent: PropTypes.number,\n  sx: PropTypes.object,\n  title: PropTypes.string,\n  description: PropTypes.string,\n  total: PropTypes.number,\n};\n","// @mui\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { useTheme } from \"@mui/material/styles\";\n\nimport Stack from \"@mui/material/Stack\";\nimport Button from \"@mui/material/Button\";\nimport Container from \"@mui/material/Container\";\nimport Grid from \"@mui/material/Unstable_Grid2\";\nimport { Link, useNavigate } from \"react-router-dom\";\n// hooks\nimport { useMockedUser } from \"src/hooks/use-mocked-user\";\n// _mock\nimport {\n  _appFeatured,\n  _appAuthors,\n  _appInstalled,\n  _appRelated,\n  _appInvoices,\n} from \"src/_mock\";\n// components\nimport { useSettingsContext } from \"src/components/settings\";\n// assets\n//import { SeoIllustration } from \"src/assets/illustrations\";\n//\nimport AppWidget from \"../app-widget\";\n// import AppWelcome from \"../app-welcome\";\n// import AppFeatured from \"../app-featured\";\n//import AppNewInvoice from \"../app-new-invoice\";\n//import AppTopAuthors from \"../app-top-authors\";\n//import AppTopRelated from \"../app-top-related\";\n//import AppAreaInstalled from \"../app-area-installed\";\nimport AppWidgetSummary from \"../app-widget-summary\";\n//import AppCurrentDownload from \"../app-current-download\";\n//import AppTopInstalledCountries from \"../app-top-installed-countries\";\nimport httpCommon from \"src/http-common\";\nimport Swal from \"sweetalert2\";\n//import WorkOrderList from \"src/sections/maintenance/WorkOrderList\";\nimport Iconify from \"src/components/iconify\";\n// ----------------------------------------------------------------------\n\nexport default function OverviewAppView() {\n  let site_ID = localStorage.getItem(\"site_ID\");\n  let emp_mst_loginID = localStorage.getItem(\"emp_mst_empl_id\");\n\n  const navigate = useNavigate();\n  const { user } = useMockedUser();\n\n  const theme = useTheme();\n\n  const settings = useSettingsContext();\n\n  const [GetAllDashbordData, setDashbordData] = useState([]);\n  const [GetAllDashbordDataFltrBy, setDashbordDataFltrBy] = useState([]);\n  const [GetAllDashbordDataSortBy, setDashbordDataSortBy] = useState([]);\n  const [GetDashbordDataPrmMst, setDashbordDataPrmMst] = useState([]);\n  const [GetPRM_MST, setGetPRM_MST] = useState([]);\n  const [DashbordTotalNumber, setDashbordTotalNumber] = useState([]);\n  const [EditFlagStatus, setEditFlagStatus] = useState(0);\n\n\n  const [count, setCount] = useState(0);\n\n  const fetchDashBordDataRefresh = async () => {\n   \n    try {\n      const response = await httpCommon.get(\n        \"/getGaugeDashbordData.php?site_cd=\" +\n          site_ID +\n          \"&admin=\" +\n          emp_mst_loginID\n      );\n    //  console.log(\"response____\",response);\n      if (response.data.status === \"SUCCESS\") {\n        setDashbordData(response.data.data);\n        setGetPRM_MST(response.data.PRM_MST);\n        setDashbordTotalNumber(response.data.DashbrdCount);\n        setDashbordDataFltrBy(response.data.RowDataFltBy);\n        setDashbordDataSortBy(response.data.RowDataSortBy);\n        setDashbordDataPrmMst(response.data.RowDataSortPrm_mst);\n        // Swal.close();\n      }\n    } catch (error) {\n      console.error(\"Error fetching data:\", error);\n    }\n  };\n\n  const fetchDashBordRefshTime = async () => {\n    try {\n      const response = await httpCommon.get(\n        \"/get_dashboardRefshTime.php?site_cd=\" + site_ID\n      );\n      // console.log(\"response____dash\", response);\n      if (response.data.status === \"SUCCESS\") {\n        const refreshTimeInMillis = response.data.data[0].RefshTime * 60000;\n        return refreshTimeInMillis;\n      \n      }\n    } catch (error) {\n      console.error(\"Error fetching data:\", error);\n    }\n  };\n\n  const fetchDashBordEditFlagStatus = async () => {\n    try {\n      const response = await httpCommon.get( \n        \"/get_dashboard_edit_flag_status.php?site_cd=\" + site_ID\n      );\n     // console.log(\"response____refreshEditFlag\", response);\n      if (response.data.status === \"SUCCESS\") {\n        const refreshEditFlag = response.data.data[0].EditFlag;\n        setEditFlagStatus(refreshEditFlag);\n      \n      }\n    } catch (error) {\n      console.error(\"Error fetching data:\", error);\n    }\n  };\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const refreshTimeInMillis = await fetchDashBordRefshTime(); // Wait for the refresh time to be fetched\n   \n      await fetchDashBordData(); // Fetch data after refresh time is fetched\n      const refreshTime = refreshTimeInMillis || 5000;\n     // console.log(\"refreshTime____\",refreshTime);\n      const interval = setInterval(() => {\n        setCount((prevCount) => prevCount + 1); \n        fetchDashBordDataRefresh(); \n      }, refreshTime);\n      \n      return () => clearInterval(interval);\n    };\n    fetchDashBordEditFlagStatus();\n    fetchData(); // Start fetching data\n  }, []);\n  \n  \n // console.log(\"Page refresh Count:\", count);\n  // Get Dashbord Data Api\n  const fetchDashBordData = async () => {\n    Swal.fire({\n      title: \"Please Wait!\",\n      allowOutsideClick: false,\n      customClass: {\n        container: \"swalcontainercustom\",\n      },\n    });\n    Swal.showLoading();\n\n    try {\n      const response = await httpCommon.get(\n        \"/getGaugeDashbordData.php?site_cd=\" +\n          site_ID +\n          \"&admin=\" +\n          emp_mst_loginID\n      );\n        console.log(\"response____dash__\",response);\n      if (response.data.status === \"SUCCESS\") {\n        setDashbordData(response.data.data);\n        setGetPRM_MST(response.data.PRM_MST);\n        setDashbordTotalNumber(response.data.DashbrdCount);\n        setDashbordDataFltrBy(response.data.RowDataFltBy);\n        setDashbordDataSortBy(response.data.RowDataSortBy);\n        setDashbordDataPrmMst(response.data.RowDataSortPrm_mst);\n        Swal.close();\n      }else{\n        Swal.close();\n      }\n    } catch (error) {\n      \n      console.error(\"Error fetching data:\", error);\n    }\n  };\n\n  const handleOnClickDB = async (cfQueryRowID) => {\n    Swal.fire({\n      title: \"Please Wait !\",\n      allowOutsideClick: false,\n      customClass: {\n        container: \"swalcontainercustom\",\n      },\n    });\n    const cfRowID = cfQueryRowID;\n\n    let newArrayFltr = null;\n    let newArraySort = null;\n    let newArrayPrm = null;\n\n    Object.keys(GetAllDashbordDataFltrBy).map((key) => {\n      if (cfRowID === key) {\n        newArrayFltr = GetAllDashbordDataFltrBy[key];\n      }\n      return null;\n    });\n\n    Object.keys(GetAllDashbordDataSortBy).map((key) => {\n      if (cfRowID === key) {\n        newArraySort = GetAllDashbordDataSortBy[key];\n      }\n      return null;\n    });\n    Object.keys(GetDashbordDataPrmMst).map((key) => {\n      if (cfRowID === key) {\n        newArrayPrm = GetDashbordDataPrmMst[key];\n      }\n      return null;\n    });\n\n    Swal.showLoading();\n    console.log(\"newArrayFltr____\",newArrayFltr);\n    if (newArrayFltr && newArrayFltr.length > 0) {\n\n      const firstItem = newArrayFltr[0];\n      //console.log(\"firstItem____\",firstItem);\n    \n      if(firstItem.cf_query_list_table === \"ast_mst\" || firstItem.cf_query_list_table === \"ast_det\"){\n        navigate(`/dashboard/asset/list`, {\n          state: {\n            GaugeDashbordData: newArrayFltr,\n            GaugeDashbordDataSort: newArraySort,\n            DropListId: cfRowID,\n          },\n        });\n        Swal.close();\n      }else if(firstItem.cf_query_list_table === \"wko_mst\" || firstItem.cf_query_list_table === \"wko_det\"){\n        navigate(`/dashboard/work/order`, {\n          state: {\n            GaugeDashbordData: newArrayFltr,\n            GaugeDashbordDataSort: newArraySort,\n            DropListId: cfRowID,\n          },\n        });\n        Swal.close();\n      }else if(firstItem.cf_query_list_table === \"wkr_mst\" || firstItem.cf_query_list_table === \"wkr_det\"){\n        navigate(`/dashboard/work/list`, {\n          state: {\n            GaugeDashbordData: newArrayFltr,\n            GaugeDashbordDataSort: newArraySort,\n            DropListId: cfRowID,\n          },\n        });\n        Swal.close();\n      }else if(firstItem.cf_query_list_table === \"itm_mst\" || firstItem.cf_query_list_table === \"itm_det\"){\n        navigate(`/dashboard/InventoryMaster/list`, {\n          state: {\n            GaugeDashbordData: newArrayFltr,\n            GaugeDashbordDataSort: newArraySort,\n            DropListId: cfRowID,\n          },\n        });\n        Swal.close();\n      }else if(firstItem.cf_query_list_table === \"prm_mst\" || firstItem.cf_query_list_table === \"prm_det\"){\n        \n        Swal.close();\n        Swal.fire({\n          icon:\"warning\",\n          title: \"Opps !\",\n          html: '<b>This Module Is Not Ready To View!</b>',\n          allowOutsideClick: false,\n          customClass: {\n            container: \"swalcontainercustom\",\n          },\n        });\n      \n      }\n      \n    } else if (newArrayPrm && newArrayPrm.length > 0) {\n      navigate(`/dashboard/work/order`, {\n        state: {\n          GaugeDashbordData: newArrayFltr,\n          GaugeDashbordDataSort: newArraySort,\n          GetDashbordDataPrmMst: newArrayPrm,\n          DropListId: cfRowID,\n        },\n      });\n    }\n  };\n  const handleOnClickGetdata = () => {\n    fetchDashBordData();\n  };\n  const sortedData = [...GetAllDashbordData].sort((a, b) => {\n    return (\n      parseInt(a.dsh_mst_display_order) - parseInt(b.dsh_mst_display_order)\n    );\n  });\n\n\n \n  return (\n    <Container maxWidth={settings.themeStretch ? false : \"xl\"}>\n      <Grid\n        container\n        justifyContent=\"flex-end\"\n        alignItems=\"center\"\n        rowSpacing={0}\n      >\n        <Grid item>\n          <button className=\"RefshBtn\" onClick={() => handleOnClickGetdata()}>\n          {/* <span style={{ fontSize: '12px', fontWeight: 'bold' }}>\n            Last Refreshed <br />\n            5:49PM\n          </span> */}\n            <Iconify\n              icon=\"ic:sharp-refresh\"\n              width={24}\n              height={24}\n              style={{ fontSize: \"22px\", marginRight: \"2px\" }}\n            />\n          </button>\n        </Grid>\n      </Grid>\n\n      <Grid\n        container\n        rowSpacing={2}\n        columnSpacing={{ xs: 1, sm: 2, md: 3 }}\n        mb={2}\n      >\n      \n        {sortedData.map((item, index) => (\n          <Grid item xs={12} md={4} key={index} className={EditFlagStatus === \"1\" ? \"gaugeDBDisable\" : EditFlagStatus === \"0\" ? \"gaugeDB\" : \"gaugeDB\"}>\n            <AppWidgetSummary\n              data={item}\n              total={parseInt(DashbordTotalNumber[item.cf_query_RowID])}\n              description={item.dsh_mst_desc}\n             // onClick={() => handleOnClickDB(item.cf_query_RowID)}\n              onClick={EditFlagStatus === \"1\" ? undefined : () => handleOnClickDB(item.cf_query_RowID)}\n            />\n          </Grid>\n        ))}\n      </Grid>\n    </Container>\n  );\n}\n","import { Helmet } from \"react-helmet-async\";\n// sections\nimport { OverviewAppView } from \"src/sections/overview/app/view\";\n\n// ----------------------------------------------------------------------\n\nexport default function OverviewAppPage() {\n  return (\n    <>\n      <Helmet>\n        <title> Dashboard</title>\n      </Helmet>\n\n      <OverviewAppView />\n    </>\n  );\n}\n"],"names":["AppWidgetSummary","_ref","title","description","percent","total","data","sx","other","useTheme","isTarget","parseInt","dsh_mst_critical_value","isCritical","dsh_mst_alert_value","isAlert","iconProps","name","color","defaultIcon","_jsxs","Card","display","alignItems","p","children","Box","flexGrow","_jsx","Typography","className","variant","fNumber","Stack","direction","mt","mb","Iconify","width","icon","mr","OverviewAppView","site_ID","localStorage","getItem","emp_mst_loginID","navigate","useNavigate","user","useMockedUser","settings","useSettingsContext","GetAllDashbordData","setDashbordData","useState","GetAllDashbordDataFltrBy","setDashbordDataFltrBy","GetAllDashbordDataSortBy","setDashbordDataSortBy","GetDashbordDataPrmMst","setDashbordDataPrmMst","GetPRM_MST","setGetPRM_MST","DashbordTotalNumber","setDashbordTotalNumber","EditFlagStatus","setEditFlagStatus","count","setCount","useEffect","async","response","httpCommon","get","status","refreshEditFlag","EditFlag","error","console","fetchDashBordEditFlagStatus","refreshTimeInMillis","RefshTime","fetchDashBordRefshTime","fetchDashBordData","interval","setInterval","prevCount","PRM_MST","DashbrdCount","RowDataFltBy","RowDataSortBy","RowDataSortPrm_mst","fetchDashBordDataRefresh","fetchData","Swal","allowOutsideClick","customClass","container","log","sortedData","sort","a","b","dsh_mst_display_order","Container","maxWidth","themeStretch","Grid","justifyContent","rowSpacing","item","onClick","height","style","fontSize","marginRight","columnSpacing","xs","sm","md","map","index","cf_query_RowID","dsh_mst_desc","undefined","cfRowID","cfQueryRowID","newArrayFltr","newArraySort","newArrayPrm","Object","keys","key","length","firstItem","cf_query_list_table","state","GaugeDashbordData","GaugeDashbordDataSort","DropListId","html","handleOnClickDB","OverviewAppPage","_Fragment","Helmet"],"sourceRoot":""}