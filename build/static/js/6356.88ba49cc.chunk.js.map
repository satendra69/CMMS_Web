{"version":3,"file":"static/js/6356.88ba49cc.chunk.js","mappings":"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","sources":["sections/_examples/mui/avatar-view.js","pages/components/mui/avatar.js"],"sourcesContent":["// @mui\nimport Masonry from '@mui/lab/Masonry';\nimport { useTheme } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\nimport Stack from '@mui/material/Stack';\nimport Badge from '@mui/material/Badge';\nimport Avatar from '@mui/material/Avatar';\nimport Tooltip from '@mui/material/Tooltip';\nimport Container from '@mui/material/Container';\nimport AvatarGroup, { avatarGroupClasses } from '@mui/material/AvatarGroup';\n// routes\nimport { paths } from 'src/routes/paths';\n// _mock\nimport { _mock } from 'src/_mock';\n// components\nimport Iconify from 'src/components/iconify';\nimport CustomBreadcrumbs from 'src/components/custom-breadcrumbs';\n//\nimport ComponentBlock from '../component-block';\n\n// ----------------------------------------------------------------------\n\nconst COLORS = ['default', 'primary', 'secondary', 'info', 'success', 'warning', 'error'];\n\nconst SIZES = [24, 32, 40, 56];\n\nconst VARIANTS = ['circular', 'rounded', 'square'];\n\nconst STATUS = ['online', 'alway', 'busy', 'offline'];\n\n// ----------------------------------------------------------------------\n\nexport default function AvatarView() {\n  const theme = useTheme();\n\n  return (\n    <>\n      <Box\n        sx={{\n          py: 5,\n          bgcolor: theme.palette.mode === 'light' ? 'grey.200' : 'grey.800',\n        }}\n      >\n        <Container>\n          <CustomBreadcrumbs\n            heading=\"Avatar\"\n            links={[\n              {\n                name: 'Components',\n                href: paths.components,\n              },\n              { name: 'Avatar' },\n            ]}\n            moreLink={['https://mui.com/components/avatars']}\n          />\n        </Container>\n      </Box>\n\n      <Container sx={{ my: 10 }}>\n        <Masonry columns={{ xs: 1, md: 2 }} spacing={3}>\n          <ComponentBlock title=\"Image\">\n            {[1, 2, 3, 4, 5].map((_, index) => (\n              <Avatar\n                key={index}\n                alt={_mock.fullName(index + 1)}\n                src={_mock.image.avatar(index + 1)}\n              />\n            ))}\n          </ComponentBlock>\n\n          <ComponentBlock title=\"Letter\">\n            {COLORS.map((color, index) => (\n              <Tooltip key={color} title={color}>\n                <Avatar alt={_mock.fullName(index + 3)}>\n                  {_mock\n                    .fullName(index + 3)\n                    .charAt(0)\n                    .toUpperCase()}\n                </Avatar>\n              </Tooltip>\n            ))}\n          </ComponentBlock>\n\n          <ComponentBlock title=\"Icon\">\n            {COLORS.map((color) => (\n              <Avatar key={color} color={color}>\n                <Iconify icon=\"eva:folder-add-outline\" width={24} />\n              </Avatar>\n            ))}\n          </ComponentBlock>\n\n          <ComponentBlock title=\"Variant\">\n            {VARIANTS.map((variant) => (\n              <Avatar\n                key={variant}\n                variant={variant}\n                sx={{ bgcolor: 'primary.main', color: 'primary.contrastText' }}\n              >\n                <Iconify icon=\"eva:folder-add-outline\" width={24} />\n              </Avatar>\n            ))}\n          </ComponentBlock>\n\n          <ComponentBlock title=\"Grouped\">\n            <Stack spacing={2} alignItems=\"center\">\n              {SIZES.map((size) => (\n                <Tooltip key={size} title={size}>\n                  <AvatarGroup\n                    key={size}\n                    sx={{\n                      [`& .${avatarGroupClasses.avatar}`]: {\n                        width: size,\n                        height: size,\n                      },\n                    }}\n                  >\n                    {COLORS.map((color, index) => (\n                      <Avatar\n                        key={color}\n                        alt={_mock.fullAddress(index + 1)}\n                        src={_mock.image.avatar(index + 1)}\n                      />\n                    ))}\n                  </AvatarGroup>\n                </Tooltip>\n              ))}\n\n              <Tooltip title=\"compact\">\n                <Badge variant=\"online\" anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}>\n                  <AvatarGroup variant=\"compact\" sx={{ width: 48, height: 48 }}>\n                    {COLORS.slice(0, 2).map((color, index) => (\n                      <Avatar\n                        key={color}\n                        alt={_mock.fullName(index + 1)}\n                        src={_mock.image.avatar(index + 1)}\n                      />\n                    ))}\n                  </AvatarGroup>\n                </Badge>\n              </Tooltip>\n            </Stack>\n          </ComponentBlock>\n\n          <ComponentBlock title=\"With Badge\">\n            <Badge\n              overlap=\"circular\"\n              anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\n              badgeContent={\n                <Avatar\n                  alt={_mock.fullName(7)}\n                  src={_mock.image.avatar(7)}\n                  sx={{\n                    p: 0,\n                    width: 24,\n                    height: 24,\n                    border: `solid 2px ${theme.palette.background.paper}`,\n                  }}\n                />\n              }\n            >\n              <Avatar alt={_mock.fullName(8)} src={_mock.image.avatar(8)} />\n            </Badge>\n\n            {STATUS.map((status, index) => (\n              <Badge\n                key={status}\n                variant={status}\n                anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\n              >\n                <Avatar alt={_mock.fullName(index + 1)} src={_mock.image.avatar(index + 1)} />\n              </Badge>\n            ))}\n          </ComponentBlock>\n\n          <ComponentBlock title=\"Sizes\">\n            {[24, 32, 48, 56, 64, 80, 128].map((size, index) => (\n              <Avatar\n                key={size}\n                alt={_mock.fullName(index + 4)}\n                src={_mock.image.avatar(index + 4)}\n                sx={{ width: size, height: size }}\n              />\n            ))}\n          </ComponentBlock>\n        </Masonry>\n      </Container>\n    </>\n  );\n}\n","import { Helmet } from 'react-helmet-async';\n// sections\nimport AvatarView from 'src/sections/_examples/mui/avatar-view';\n\n// ----------------------------------------------------------------------\n\nexport default function AvatarPage() {\n  return (\n    <>\n      <Helmet>\n        <title> MUI: Avatar</title>\n      </Helmet>\n\n      <AvatarView />\n    </>\n  );\n}\n"],"names":["COLORS","SIZES","VARIANTS","STATUS","AvatarView","theme","useTheme","_jsxs","_Fragment","children","_jsx","Box","sx","py","bgcolor","palette","mode","Container","CustomBreadcrumbs","heading","links","name","href","paths","components","moreLink","my","Masonry","columns","xs","md","spacing","ComponentBlock","title","map","_","index","Avatar","alt","_mock","fullName","src","image","avatar","color","Tooltip","charAt","toUpperCase","Iconify","icon","width","variant","Stack","alignItems","size","AvatarGroup","concat","avatarGroupClasses","height","fullAddress","Badge","anchorOrigin","vertical","horizontal","slice","overlap","badgeContent","p","border","background","paper","status","AvatarPage","Helmet"],"sourceRoot":""}